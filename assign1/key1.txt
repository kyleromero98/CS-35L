Kyle Romero
204747283
TA: Tan
Lab Section 7

HW #1 - Learning to use Emacs

Excercise 1.1: Moving Around in Emacs
2.
C-s p u
M-f
3.
C-s l a b
M-b
4.
C-s s e l f
M-b
5.
C-s a r r o w
M-b
6.
C-e
7.
C-a
8. I don't think you can shorten this by any key strokes.
9. No I did not move the cursor while completing this excercise
10. C-x C-c

Excercise 1.2: Deleting Text in Emacs
2. M-g M-g 1 8 Enter C-k
3. C-s d e l C-a C-k
4. C-s < ! C-a C-k C-k C-k C-k C-k 
5. C-s < ! C-b C-b M-z >
C-s < ! C-a C-k
C-x C-s
C-x C-c

Excercise 1.3: Inserting Text in Emacs
2. C-s a s s i g n m e n t Space 1 M-% A s s i g n m e n t Space 3 7 Enter y y
Esc <
3. C-s u t f - 8 M-% U S - A S C I I Enter y
Esc <
4. C-s < / o C-a Enter
C-x C-s
Note: At this point I got an error about encoding that related to the
chinese characters. I just saved the file as UTF-8
C-x C-c

Excercise 1.4: Other editing tasks in emacs
3 & 4. C-s - < ! C-a C-f C-Space C-e M-w M-g M-g 1 8 Enter C-y
C-s - < ! - - d C-a C-f C-Space C-e M-w M-g M-g 9 3 Enter C-y
C-s - < ! - - Y C-a C-f C-Space C-e DOWN DOWN M-w M-g M-g 3 0 3 Enter C-y
Esc > C-r < ! - - - C-a C-f C-Space C-e M-w M-g M-g 3 4 0 Enter C-k C-y
Esc > C-r - < C-a C-f C-Space C-e M-w M-g M-g 3 5 5 Enter C-y
5.
C-Space Esc > Delete
6.
C-_
7. C-r - - - Space C-a < ! - - Esc > - - >
I had to repeat this process to comment out the rest of the content
because there were some problems in the HTML file and commenting things out.
8.
Esc < M-% < o l > Enter < O l > Enter y y y y y y y
I found 7 instances of this string in this file.
C-x C-s
C-x C-c

Excercise 1.5: Doing commands in Emacs
1.
M-x m k d i r Enter j u n k Enter
2.
C-x C-f j u n k / h e l l o . c
Copy and paste source code from the assignment webpage
C-s
3.
M-x c o m p i l e Enter M-Backspace M-Backspace g c c h e l l o . c Enter
4.
C-x b h e l l o - o u t
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}
C-Space M-> M-w C-x C-f Bkspace Bkspace Bkspace
Bkspace k e y 1 . t x t Enter M-> C-y
C-x C-s
C-x C-c

Excercise 1.6: Running Elisp Code
1.
C-x 2 C-x o C-x b Enter
2.
( r a n d o m ) C-j
3.
( s e t q Space x Space ( r a n d o m ) ) C-j
( s e t q Space y Space ( r a n d o m ) ) C-j
4.
( * Space x Space y ) C-j
The product of my two random numbers is: -1881029861172795424
This result is incorrect because the two numbers are both ~18 digits long
and their result is 19 digits long. This is mathematically not possible.
This is likely due to some kind of overflow when the result is computed.
5.
M-: ( * Space x Space y ) Enter
The result of the computation is the same but this time we have two
additional values. The output is as follows:
-1881029861172795424 (#o227451724726071123740, #x25e53d4eb0e4a7e0)
6.
The two numbers are not truly random in a mathematical sense becasue there
is a finite number of values that the computer could potentially
choose from. In a truly mathematically random situation there would need
to be infinite possibilities for the random number. Additionally,
the algorithm for generating a random number relies on some kind of seed
that is not random. That is why most random number generators
are pseudorandom and not actually random.
7.
Assuming the mathematical definition of truly random, specifically, that
there are infinite possibilities for the random values. The
probability that the computation overflowed is 1 or 100% because there
are an infinite number of numbers that lie above INT_MAX or
below INT_MIN.

If we assume that there are finite possibilities for the random values
of each integer then we can assume that the probability is
still very close to 1. There are 2^64 possbile products for this
computation and a very small subset of these values lie within
the range of -2^31 to 2^31 - 1.
